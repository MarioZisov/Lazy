<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Lazy.UI"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colors.xaml"/>
        <ResourceDictionary Source="Icons.xaml"/>
        <ResourceDictionary Source="Fonts.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="Icon" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Viewbox Width="{TemplateBinding MinWidth}" Height="{TemplateBinding MinHeight}">
                            <Canvas Width="24" Height="24">
                                <Path Data="{TemplateBinding Content}" Fill="{TemplateBinding Foreground}"/>
                            </Canvas>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Icon}">
        <Setter Property="IsHitTestVisible" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="MinWidth" Value="30"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{StaticResource LightBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ControlIconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Icon}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource LightBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="MinHeight" Value="18"/>
        <Setter Property="MinWidth" Value="18"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource MediumLightBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource MediumDarkBrush}"/>
            </Trigger>
        </Style.Triggers>
        
    </Style>

    <Style x:Key="CloseIconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ControlIconButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource RedBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{StaticResource DarkRedBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BarButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Icon}">
        <Setter Property="IsHitTestVisible" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="MinWidth" Value="35"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{StaticResource LightBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LightBrush}"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ElementButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Icon}">
        <Setter Property="IsHitTestVisible" Value="True"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MinWidth" Value="20"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{StaticResource LightBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="StatusIcon" TargetType="{x:Type Button}" BasedOn="{StaticResource Icon}">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="MinHeight" Value="15"/>
        <Setter Property="MinWidth" Value="15"/>
    </Style>
    
       
    <Style x:Key="PrimaryButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource GreenBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PureBlackBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LightBrush}"/>
        <Setter Property="FontFamily" Value="{StaticResource MontserratMedium}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightGreenBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource LightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>